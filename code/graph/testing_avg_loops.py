# Copyright Â© 2023 Zakhidov Dmitry <zakhidov.dim@yandex.ru>
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file. Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: https://www.gnu.org/copyleft/gpl.html.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import copy

import numpy as np
import logging
logger = logging.getLogger(__name__)

filtered_signal_data2=[-0.086, -0.086, -0.084, -0.084, -0.08 , -0.08 , -0.072, -0.072,
       -0.064, -0.064, -0.058, -0.058, -0.05 , -0.05 , -0.042, -0.042,
       -0.034, -0.034, -0.026, -0.026, -0.02 , -0.02 , -0.018, -0.018,
       -0.014, -0.014, -0.012, -0.012, -0.01 , -0.01 , -0.008, -0.008,
       -0.01 , -0.01 , -0.01 , -0.01 , -0.01 , -0.01 , -0.008, -0.008,
       -0.008, -0.008, -0.008, -0.008, -0.008, -0.008, -0.008, -0.008,
       -0.008, -0.008, -0.008, -0.008, -0.01 , -0.01 , -0.01 , -0.01 ,
       -0.01 , -0.01 , -0.01 , -0.01 , -0.008, -0.008, -0.01 , -0.01 ,
       -0.01 , -0.01 , -0.01 , -0.01 , -0.008, -0.008, -0.008, -0.008,
       -0.008, -0.008, -0.006, -0.006, -0.004, -0.004, -0.004, -0.004,
       -0.006, -0.006, -0.004, -0.004, -0.002, -0.002, -0.002, -0.002,
       -0.004, -0.004, -0.004, -0.004,  0.002,  0.002,  0.004,  0.004,
        0.002,  0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.002,  0.002,
        0.   ,  0.   , -0.002, -0.002,  0.   ,  0.   ,  0.004,  0.004,
        0.002,  0.002,  0.   ,  0.   ,  0.002,  0.002,  0.004,  0.004,
        0.006,  0.006,  0.004,  0.004,  0.002,  0.002,  0.004,  0.004,
        0.006,  0.006,  0.004,  0.004,  0.004,  0.004,  0.008,  0.008,
        0.008,  0.008,  0.008,  0.008,  0.008,  0.008,  0.01 ,  0.01 ,
        0.012,  0.012,  0.012,  0.012,  0.012,  0.012,  0.014,  0.014,
        0.018,  0.018,  0.018,  0.018,  0.02 ,  0.02 ,  0.024,  0.024,
        0.026,  0.026,  0.028,  0.028,  0.034,  0.034,  0.038,  0.038,
        0.04 ,  0.04 ,  0.044,  0.044,  0.048,  0.048,  0.054,  0.054,
        0.06 ,  0.06 ,  0.064,  0.064,  0.066,  0.066,  0.07 ,  0.07 ,
        0.074,  0.074,  0.078,  0.078,  0.082,  0.082,  0.084,  0.084,
        0.086,  0.086,  0.092,  0.092,  0.096,  0.096,  0.094,  0.094,
        0.094,  0.094,  0.092,  0.092,  0.09 ,  0.09 ,  0.084,  0.084,
        0.076,  0.076,  0.068,  0.068,  0.062,  0.062,  0.054,  0.054,
        0.044,  0.044,  0.036,  0.036,  0.032,  0.032,  0.026,  0.026,
        0.02 ,  0.02 ,  0.014,  0.014,  0.014,  0.014,  0.014,  0.014,
        0.012,  0.012,  0.01 ,  0.01 ,  0.01 ,  0.01 ,  0.012,  0.012,
        0.012,  0.012,  0.01 ,  0.01 ,  0.012,  0.012,  0.016,  0.016,
        0.016,  0.016,  0.016,  0.016,  0.014,  0.014,  0.014,  0.014,
        0.014,  0.014,  0.012,  0.012,  0.01 ,  0.01 ,  0.008,  0.008,
        0.008,  0.008,  0.008,  0.008,  0.008,  0.008,  0.006,  0.006,
        0.006,  0.006,  0.004,  0.004,  0.002,  0.002,  0.002,  0.002,
        0.004,  0.004,  0.002,  0.002,  0.   ,  0.   ,  0.   ,  0.   ,
        0.   ,  0.   , -0.002, -0.002, -0.002, -0.002, -0.002, -0.002,
       -0.002, -0.002, -0.002, -0.002, -0.002, -0.002, -0.002, -0.002,
       -0.002, -0.002, -0.004, -0.004, -0.004, -0.004, -0.004, -0.004,
       -0.006, -0.006, -0.006, -0.006, -0.006, -0.006, -0.008, -0.008,
       -0.008, -0.008, -0.004, -0.004, -0.004, -0.004, -0.006, -0.006,
       -0.01 , -0.01 , -0.01 , -0.01 , -0.008, -0.008, -0.01 , -0.01 ,
       -0.014, -0.014, -0.016, -0.016, -0.012, -0.012, -0.01 , -0.01 ,
       -0.014, -0.014, -0.018, -0.018, -0.018, -0.018, -0.02 , -0.02 ,
       -0.026, -0.026, -0.034, -0.034, -0.034, -0.034, -0.032, -0.032,
       -0.036, -0.036]
filtered_signal_data1=[-0.01 , -0.01 , -0.01 , -0.008, -0.008, -0.008, -0.008, -0.008,
       -0.008, -0.006, -0.006, -0.004, -0.004, -0.004, -0.004, -0.006,
       -0.006, -0.004, -0.004, -0.002, -0.002, -0.002, -0.002, -0.004,
       -0.004, -0.004, -0.004,  0.002,  0.002,  0.004,  0.004,  0.002,
        0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.002,  0.002,  0.   ,
        0.   , -0.002, -0.002,  0.   ,  0.   ,  0.004,  0.004,  0.002,
        0.002,  0.   ,  0.   ,  0.002,  0.002,  0.004,  0.004,  0.006,
        0.006,  0.004,  0.004,  0.002,  0.002,  0.004,  0.004,  0.006,
        0.006,  0.004,  0.004,  0.004,  0.004,  0.008,  0.008,  0.008,
        0.008,  0.008,  0.008,  0.008,  0.008,  0.01 ,  0.01 ,  0.012,
        0.012,  0.012,  0.012,  0.012,  0.012,  0.014,  0.014,  0.018,
        0.018,  0.018,  0.018,  0.02 ,  0.02 ,  0.024,  0.024,  0.026,
        0.026,  0.028,  0.028,  0.034,  0.034,  0.038,  0.038,  0.04 ,
        0.04 ,  0.044,  0.044,  0.048,  0.048,  0.054,  0.054,  0.06 ,
        0.06 ,  0.064,  0.064,  0.066,  0.066,  0.07 ,  0.07 ,  0.074,
        0.074,  0.078,  0.078,  0.082,  0.082,  0.084,  0.084,  0.086,
        0.086,  0.092,  0.092,  0.096,  0.096,  0.094,  0.094,  0.094,
        0.094,  0.092,  0.092,  0.09 ,  0.09 ,  0.084,  0.084,  0.076,
        0.076,  0.068,  0.068,  0.062,  0.062,  0.054,  0.054,  0.044,
        0.044,  0.036,  0.036,  0.032,  0.032,  0.026,  0.026,  0.02 ,
        0.02 ,  0.014,  0.014,  0.014,  0.014,  0.014,  0.014,  0.012,
        0.012,  0.01 ,  0.01 ,  0.01 ,  0.01 ,  0.012,  0.012,  0.012,
        0.012,  0.01 ,  0.01 ,  0.012,  0.012,  0.016,  0.016,  0.016,
        0.016,  0.016,  0.016,  0.014,  0.014,  0.014,  0.014,  0.014,
        0.014,  0.012,  0.012,  0.01 ,  0.01 ,  0.008,  0.008,  0.008,
        0.008,  0.008,  0.008,  0.008,  0.008,  0.006,  0.006,  0.006,
        0.006,  0.004,  0.004,  0.002,  0.002,  0.002,  0.002,  0.004,
        0.004,  0.002,  0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
        0.   , -0.002, -0.002, -0.002, -0.002, -0.002, -0.002, -0.002,
       -0.002, -0.002, -0.002, -0.002, -0.002, -0.002, -0.002, -0.002,
       -0.002, -0.004, -0.004, -0.004, -0.004, -0.004, -0.004, -0.006,
       -0.006, -0.006, -0.006, -0.006, -0.006, -0.008, -0.008, -0.008,
       -0.008, -0.004, -0.004, -0.004, -0.004, -0.006, -0.006, -0.01 ,
       -0.01 , -0.01 , -0.01 , -0.008, -0.008, -0.01 , -0.01 , -0.014,
       -0.014, -0.016, -0.016, -0.012, -0.012, -0.01 , -0.01 , -0.014,
       -0.014, -0.018, -0.018, -0.018, -0.018, -0.02 , -0.02 , -0.026,
       -0.026, -0.034, -0.034, -0.034, -0.034, -0.032, -0.032, -0.036,
       -0.036, -0.044, -0.044, -0.048, -0.048, -0.048, -0.048, -0.054,
       -0.054, -0.06 , -0.06 , -0.066, -0.066, -0.068, -0.068, -0.072,
       -0.072, -0.078, -0.078, -0.084, -0.084, -0.086, -0.086, -0.086,
       -0.086, -0.09 , -0.09 , -0.092, -0.092, -0.09 , -0.09 , -0.086,
       -0.086, -0.088, -0.088, -0.088, -0.088, -0.088, -0.088, -0.088,
       -0.088, -0.084, -0.084, -0.08 , -0.08 , -0.074, -0.074, -0.066,
       -0.066, -0.058, -0.058, -0.048, -0.048, -0.04 , -0.04 , -0.034,
       -0.034, -0.028, -0.028, -0.022, -0.022, -0.018, -0.018, -0.014,
       -0.014, -0.012, -0.012, -0.012, -0.012, -0.012, -0.012, -0.01 ,
       -0.01 , -0.008, -0.008, -0.01 , -0.01 , -0.008, -0.008, -0.008,
       -0.008, -0.008, -0.008, -0.006, -0.006, -0.008, -0.008, -0.01 ,
       -0.01 , -0.01 , -0.01 , -0.008, -0.008, -0.01 , -0.01 , -0.012,
       -0.012, -0.01 , -0.01 , -0.006]
filtered_field_data2=[ 2.88,  2.88,  2.96,  2.96,  3.12,  3.12,  3.2 ,  3.2 ,  3.36,
        3.36,  3.44,  3.44,  3.6 ,  3.6 ,  3.68,  3.68,  3.76,  3.76,
        3.84,  3.84,  3.92,  3.92,  4.08,  4.08,  4.16,  4.16,  4.24,
        4.24,  4.32,  4.32,  4.4 ,  4.4 ,  4.48,  4.48,  4.48,  4.48,
        4.56,  4.56,  4.64,  4.64,  4.72,  4.72,  4.72,  4.72,  4.8 ,
        4.8 ,  4.8 ,  4.8 ,  4.88,  4.88,  4.88,  4.88,  4.88,  4.88,
        4.88,  4.88,  4.96,  4.96,  4.96,  4.96,  4.96,  4.96,  4.96,
        4.96,  4.96,  4.96,  4.88,  4.88,  4.88,  4.88,  4.88,  4.88,
        4.8 ,  4.8 ,  4.8 ,  4.8 ,  4.8 ,  4.8 ,  4.72,  4.72,  4.64,
        4.64,  4.64,  4.64,  4.56,  4.56,  4.48,  4.48,  4.48,  4.48,
        4.4 ,  4.4 ,  4.32,  4.32,  4.24,  4.24,  4.16,  4.16,  4.08,
        4.08,  4.  ,  4.  ,  3.92,  3.92,  3.76,  3.76,  3.68,  3.68,
        3.6 ,  3.6 ,  3.52,  3.52,  3.36,  3.36,  3.28,  3.28,  3.12,
        3.12,  3.04,  3.04,  2.88,  2.88,  2.8 ,  2.8 ,  2.64,  2.64,
        2.56,  2.56,  2.4 ,  2.4 ,  2.24,  2.24,  2.16,  2.16,  2.  ,
        2.  ,  1.84,  1.84,  1.68,  1.68,  1.52,  1.52,  1.44,  1.44,
        1.28,  1.28,  1.12,  1.12,  0.96,  0.96,  0.8 ,  0.8 ,  0.64,
        0.64,  0.48,  0.48,  0.32,  0.32,  0.16,  0.16,  0.  ,  0.  ,
       -0.08, -0.08, -0.24, -0.24, -0.4 , -0.4 , -0.56, -0.56, -0.72,
       -0.72, -0.88, -0.88, -1.04, -1.04, -1.2 , -1.2 , -1.36, -1.36,
       -1.52, -1.52, -1.68, -1.68, -1.84, -1.84, -1.92, -1.92, -2.08,
       -2.08, -2.24, -2.24, -2.4 , -2.4 , -2.56, -2.56, -2.64, -2.64,
       -2.8 , -2.8 , -2.96, -2.96, -3.04, -3.04, -3.2 , -3.2 , -3.28,
       -3.28, -3.44, -3.44, -3.52, -3.52, -3.68, -3.68, -3.76, -3.76,
       -3.84, -3.84, -3.92, -3.92, -4.08, -4.08, -4.16, -4.16, -4.24,
       -4.24, -4.32, -4.32, -4.4 , -4.4 , -4.48, -4.48, -4.56, -4.56,
       -4.56, -4.56, -4.64, -4.64, -4.72, -4.72, -4.8 , -4.8 , -4.8 ,
       -4.8 , -4.88, -4.88, -4.88, -4.88, -4.96, -4.96, -4.96, -4.96,
       -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96,
       -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.88, -4.88,
       -4.96, -4.96, -4.88, -4.88, -4.88, -4.88, -4.8 , -4.8 , -4.8 ,
       -4.8 , -4.72, -4.72, -4.72, -4.72, -4.64, -4.64, -4.56, -4.56,
       -4.48, -4.48, -4.4 , -4.4 , -4.4 , -4.4 , -4.32, -4.32, -4.24,
       -4.24, -4.16, -4.16, -4.08, -4.08, -4.  , -4.  , -3.84, -3.84,
       -3.76, -3.76, -3.68, -3.68, -3.6 , -3.6 , -3.44, -3.44, -3.36,
       -3.36, -3.2 , -3.2 , -3.12, -3.12, -2.96, -2.96, -2.88, -2.88,
       -2.72, -2.72, -2.56, -2.56, -2.48, -2.48, -2.32, -2.32, -2.16,
       -2.16, -2.08, -2.08, -1.92, -1.92, -1.76, -1.76, -1.6 , -1.6 ,
       -1.44, -1.44, -1.28, -1.28, -1.2 , -1.2 , -1.04, -1.04, -0.88,
       -0.88, -0.72, -0.72, -0.56, -0.56, -0.4 , -0.4 , -0.24, -0.24,
       -0.08, -0.08]
filtered_field_data1=[ 4.96,  4.88,  4.88,  4.88,  4.88,  4.88,  4.88,  4.8 ,  4.8 ,
        4.8 ,  4.8 ,  4.8 ,  4.8 ,  4.72,  4.72,  4.64,  4.64,  4.64,
        4.64,  4.56,  4.56,  4.48,  4.48,  4.48,  4.48,  4.4 ,  4.4 ,
        4.32,  4.32,  4.24,  4.24,  4.16,  4.16,  4.08,  4.08,  4.  ,
        4.  ,  3.92,  3.92,  3.76,  3.76,  3.68,  3.68,  3.6 ,  3.6 ,
        3.52,  3.52,  3.36,  3.36,  3.28,  3.28,  3.12,  3.12,  3.04,
        3.04,  2.88,  2.88,  2.8 ,  2.8 ,  2.64,  2.64,  2.56,  2.56,
        2.4 ,  2.4 ,  2.24,  2.24,  2.16,  2.16,  2.  ,  2.  ,  1.84,
        1.84,  1.68,  1.68,  1.52,  1.52,  1.44,  1.44,  1.28,  1.28,
        1.12,  1.12,  0.96,  0.96,  0.8 ,  0.8 ,  0.64,  0.64,  0.48,
        0.48,  0.32,  0.32,  0.16,  0.16,  0.  ,  0.  , -0.08, -0.08,
       -0.24, -0.24, -0.4 , -0.4 , -0.56, -0.56, -0.72, -0.72, -0.88,
       -0.88, -1.04, -1.04, -1.2 , -1.2 , -1.36, -1.36, -1.52, -1.52,
       -1.68, -1.68, -1.84, -1.84, -1.92, -1.92, -2.08, -2.08, -2.24,
       -2.24, -2.4 , -2.4 , -2.56, -2.56, -2.64, -2.64, -2.8 , -2.8 ,
       -2.96, -2.96, -3.04, -3.04, -3.2 , -3.2 , -3.28, -3.28, -3.44,
       -3.44, -3.52, -3.52, -3.68, -3.68, -3.76, -3.76, -3.84, -3.84,
       -3.92, -3.92, -4.08, -4.08, -4.16, -4.16, -4.24, -4.24, -4.32,
       -4.32, -4.4 , -4.4 , -4.48, -4.48, -4.56, -4.56, -4.56, -4.56,
       -4.64, -4.64, -4.72, -4.72, -4.8 , -4.8 , -4.8 , -4.8 , -4.88,
       -4.88, -4.88, -4.88, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96,
       -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96, -4.96,
       -4.96, -4.96, -4.96, -4.96, -4.96, -4.88, -4.88, -4.96, -4.96,
       -4.88, -4.88, -4.88, -4.88, -4.8 , -4.8 , -4.8 , -4.8 , -4.72,
       -4.72, -4.72, -4.72, -4.64, -4.64, -4.56, -4.56, -4.48, -4.48,
       -4.4 , -4.4 , -4.4 , -4.4 , -4.32, -4.32, -4.24, -4.24, -4.16,
       -4.16, -4.08, -4.08, -4.  , -4.  , -3.84, -3.84, -3.76, -3.76,
       -3.68, -3.68, -3.6 , -3.6 , -3.44, -3.44, -3.36, -3.36, -3.2 ,
       -3.2 , -3.12, -3.12, -2.96, -2.96, -2.88, -2.88, -2.72, -2.72,
       -2.56, -2.56, -2.48, -2.48, -2.32, -2.32, -2.16, -2.16, -2.08,
       -2.08, -1.92, -1.92, -1.76, -1.76, -1.6 , -1.6 , -1.44, -1.44,
       -1.28, -1.28, -1.2 , -1.2 , -1.04, -1.04, -0.88, -0.88, -0.72,
       -0.72, -0.56, -0.56, -0.4 , -0.4 , -0.24, -0.24, -0.08, -0.08,
        0.08,  0.08,  0.24,  0.24,  0.4 ,  0.4 ,  0.56,  0.56,  0.72,
        0.72,  0.88,  0.88,  1.04,  1.04,  1.2 ,  1.2 ,  1.28,  1.28,
        1.44,  1.44,  1.6 ,  1.6 ,  1.76,  1.76,  1.92,  1.92,  2.08,
        2.08,  2.16,  2.16,  2.32,  2.32,  2.48,  2.48,  2.64,  2.64,
        2.72,  2.72,  2.88,  2.88,  2.96,  2.96,  3.12,  3.12,  3.2 ,
        3.2 ,  3.36,  3.36,  3.44,  3.44,  3.6 ,  3.6 ,  3.68,  3.68,
        3.76,  3.76,  3.84,  3.84,  4.  ,  4.  ,  4.08,  4.08,  4.16,
        4.16,  4.24,  4.24,  4.32,  4.32,  4.4 ,  4.4 ,  4.48,  4.48,
        4.48,  4.48,  4.56,  4.56,  4.64,  4.64,  4.72,  4.72,  4.72,
        4.72,  4.8 ,  4.8 ,  4.8 ,  4.8 ,  4.88,  4.88,  4.88,  4.88,
        4.88,  4.88,  4.96,  4.96,  4.96,  4.96,  4.96,  4.96,  4.96]

class hystLoop:
    '''ÑÑÐ°Ð½Ð¸Ñ Ð´Ð°Ð½Ð½ÑÐµ Ð¾ Ð¿ÐµÑÐ»Ðµ Ð¸ ÐµÐµ Ð¸ÑÑÐ¾Ð´Ð½ÑÑ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÐ°Ñ, ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ñ Ð¼ÐµÑÐ¾Ð´Ñ ÑÐ°ÑÑÐµÑÐ° Ð¿ÐµÑÐ»Ð¸'''
    def __init__(self, raw_x, raw_y, resistance, wire_square) -> None:
        self.raw_data_x = raw_x
        self.raw_data_y = raw_y
        self.filtered_raw_data_x = raw_x
        self.filtered_raw_data_y = raw_y
        self.plot_obj = None
        self.data_x = None
        self.data_y = None
        self.Q2 = 1.67
        self.resistance = resistance
        self.wire_square = wire_square
        
        
def my_custom_function(x):
    #return np.sin(x) ** 2 + np.cos(x) ** 2
    return np.array([15 for i in range(len(x))])

def gen_my_func():
	x = np.linspace(0, 5, 500)  
	y = my_custom_function(x)
	new = hystLoop(raw_x=x.tolist(), raw_y=y.tolist(), resistance=resistance, wire_square=wire_square)
	return new

def generate_data(func, num_points, variation, start, stop):
    x = np.linspace(start, stop, num_points)
    y = func(x) + np.random.normal(0.1, variation, size=x.shape)
    return x, y

def plot_loops(loops, new_loops=None):
    import matplotlib.pyplot as plt
    plt.figure(figsize=(12, 8))
    
    for loop in loops:
        plt.plot(loop.raw_data_x, loop.raw_data_y, label=f'Resistance: {loop.resistance}, Wire: {loop.wire_square}', alpha=0.5)
    
    if new_loops is not None:
        for loop in new_loops:
            plt.plot(loop.raw_data_x, loop.raw_data_y, label='Average Loop', color='orange', linewidth=2.5, alpha=1.0)
    
    plt.title('ÐÑÐ°ÑÐ¸ÐºÐ¸ hystLoop')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.legend()
    plt.grid()
    plt.show()

class LoopAnalyzer:
    def __init__(self, loops_stack):
        self.loops_stack = loops_stack

    def avg_loop(self):
        new_loop, before_comb, after_comb = self.calc_avg_loop(loops_stack=self.loops_stack)
        return new_loop, before_comb, after_comb

    def calc_avg_loop(self, loops_stack):
        '''Ð²ÐµÑÐ½ÐµÑ Ð¾Ð±ÑÐµÐºÑ Ð¿ÐµÑÐ»Ð¸, Ð¿Ð¾Ð»ÑÑÐµÐ½Ð½ÑÐ¹ ÑÑÑÐµÐ´Ð½ÐµÐ½Ð¸ÐµÐ¼ ÑÑÐµÐºÐ° Ð¿ÐµÑÐµÐ»Ñ'''
        if len(loops_stack) == 0:
            return False
        elif len(loops_stack) == 1:
            return loops_stack[0]
        
        new_loop = loops_stack[0]
        for i in range(1, len(loops_stack)):
            new_loop = self.calc_avg_two_loops(new_loop, loops_stack[i])  
        
        return new_loop
            
    def calc_avg_two_loops(self, loop1, loop2):
        if loop1.time_scale != loop2.time_scale:
            logger.info("Ð½ÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ Ð²ÑÑÐ¸ÑÐ»Ð¸ÑÑ ÑÑÐµÐ´Ð½ÐµÐµ Ð¼ÐµÐ¶Ð´Ñ Ð¿ÐµÑÐ»ÑÐ¼Ð¸, Ð²ÑÐµÐ¼ÐµÐ½Ð½Ð¾Ð¹ ÑÐ°Ð³ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±ÑÑÑ Ð¾Ð´Ð¸Ð½Ð°ÐºÐ¾Ð²ÑÐ¼")
            return False
        
        mean_resistance  = (loop1.resistance + loop2.resistance)/2
        mean_wire_square = (loop1.wire_square + loop2.wire_square)/2
        
        mean_sig = self.average_arrays(loop2.filtered_signal_data,
                                       loop1.filtered_signal_data)
        
        mean_field = self.average_arrays(loop2.filtered_field_data,
                                         loop1.filtered_field_data)
                             
        new_loop = hystLoop(raw_x        =mean_sig,
                            raw_y        =mean_field,
                            time_scale   =loop1.time_scale,
                            resistance   =mean_resistance,
                            wire_square  =mean_wire_square
                            )
        return new_loop

def create_loops(x, y, scale):
    loops = []
    for i in range(x):
        loops.append(hystLoop(raw_x=x[i], raw_y=[i], time_scale=scale, resistance=5, wire_square=1))
    return loops


if __name__ == '__main__':

    loops = [] 
    for i in range(1):
        x, y = generate_data(np.sin, 50, 0.1 + i * 0.01 , 0, 10)
        resistance = 5
        wire_square = 1
        loops.append(hystLoop(raw_x=x.tolist(), raw_y=y.tolist(), resistance=resistance, wire_square=wire_square))

    for i in range(1):
        x, y = generate_data(np.sin, 50, 0.1 + i * 0.01, 2, 8)
        resistance = 5
        wire_square = 1
        loops.append(hystLoop(raw_x=x.tolist(), raw_y=y.tolist(), resistance=resistance, wire_square=wire_square))
        
    loops.append(gen_my_func())

    x = [filtered_field_data1, filtered_field_data2]
    y = [filtered_signal_data1, filtered_signal_data2]


    build_loops = copy.deepcopy(loops)
    analyzer = LoopAnalyzer(loops)
    new_loop = analyzer.avg_loop()

    #plot_loops(build_loops, [new_loop])
