text
hdf5_io/
    __init__.py
    facade.py              # Фасад модуля - основной точкa входа
    adapters.py            # Адаптеры для преобразования данных ядра <-> HDF5
    versioning.py          # Логика версионирования и миграций
    models.py              # Даталог-классы для сериализуемых сущностей
    hdf5_entities/         # Пакет с классами для работы с узлами HDF5
        __init__.py
        base.py            # Базовый класс для всех HDF5-сущностей
        file.py            # Представление файла
        session.py         # Представление сессии
        plot.py            # Представление графика
        oscillogram_data.py # Представление данных осциллограмм
        # ... другие сущности
    load_strategies/       # Пакет для стратегий выборочной загрузки
        __init__.py
        base.py
        metadata_strategy.py  # Загрузка только метаданных
        full_load_strategy.py # Полная загрузка
        # ... другие стратегии
Ответственность классов
HDF5Facade (в facade.py):

Предоставляет высокоуровневый API для ядра приложения (save_project, load_project).

Инкапсулирует всю внутреннюю логику модуля.

Использует адаптеры для преобразования данных.

Адаптеры (в adapters.py):

Классы типа ProjectToHDF5Adapter и HDF5ToProjectAdapter.

Преобразуют объекты ядра приложения в дата-классы из models.py и обратно.

Изолируют логику преобразования, позволяя независимо изменять ядро и модуль HDF5.

Классы сущностей HDF5 (в hdf5_entities/):

Наследуются от BaseHDF5Entity (содержит общие методы работы с атрибутами/группами).

Каждый класс отвечает за работу с конкретным узлом:

HDF5File: создание/открытие файла, управление атрибутами верхнего уровня.

HDF5Session: управление сессией, ее параметрами, данными.

HDF5Plot: работа с графиком, его стилями, историей.

Имеют методы write(self, data: Model) и read(self) -> Model для сериализации.

Дата-классы (в models.py):

Например, SessionModel, PlotModel, OscillogramDataModel.

Содержат данные для сериализации. Используются как промежуточный формат между адаптерами и HDF5-сущностями.

VersioningManager (в versioning.py):

Содержит логику определения версии файла и применения миграций.

Использует паттерн Стратегия для миграций между конкретными версиями.

Стратегии загрузки (в load_strategies/):

Базовый класс LoadStrategy с методом load(entity: BaseHDF5Entity) -> Model.

Конкретные реализации: MetadataLoadStrategy (игнорирует большие datasets), FullLoadStrategy.

Взаимодействие компонентов при сохранении
Ядро приложения передает объект проекта в HDF5Facade.save_project().

Фасад использует ProjectToHDF5Adapter для преобразования проекта в дата-классы.

Создается экземпляр HDF5File для работы с файлом.

Для каждой сессии создается HDF5Session, который recursively создает свои подгруппы (HDF5Plot и т.д.).

Каждая сущность вызывает свой метод write() с соответствующим дата-классом.

HDF5File записывает атрибуты версии и даты создания.

Взаимодействие компонентов при загрузке
Ядро запрашивает загрузку через HDF5Facade.load_project() с указанием стратегии (например, только метаданные).

HDF5File открывает файл, проверяет версию через VersioningManager и применяет миграции при необходимости.

Для каждой сессии создается HDF5Session, который рекурсивно читает данные с использованием переданной стратегии загрузки.

Данные из дата-классов преобразуются обратно в объекты ядра через HDF5ToProjectAdapter.